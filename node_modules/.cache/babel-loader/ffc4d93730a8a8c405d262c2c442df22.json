{"ast":null,"code":"var _jsxFileName = \"/Users/alex/projects/IBM/1/to-do-list_week1-tinyantlers/src/component/Todos.js\";\nimport React from \"react\";\nimport \"../component/todos.css\";\nimport { Card, CardContent, Grid, ListItemButton, ListItemText, Checkbox } from \"@mui/material\"; // 1. This component formats and returns the list of todos.\n// 2. Treat the question mark like an if statement.\n// If the todos array has items in the list [todos.length], we want to return the list\n// Else, return a message saying \"You have no todo's left\"\n// 3. The map function is called to assign each array item with a key\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\n// a key, and it's own card shown in the UI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Todos = _ref => {\n  let {\n    todos\n  } = _ref;\n  console.log(todos);\n  const todoList = todos.length ? todos.map(todo => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            style: {\n              padding: \"50px\"\n            },\n            children: todo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this)\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"You have no todo's left\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this); // Lastly, return the todoList constant that we created above to show all of the items on the screen.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoCollection\",\n    style: {\n      padding: \"10px\"\n    },\n    children: todoList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"names":["React","Card","CardContent","Grid","ListItemButton","ListItemText","Checkbox","Todos","todos","console","log","todoList","length","map","todo","padding","id"],"sources":["/Users/alex/projects/IBM/1/to-do-list_week1-tinyantlers/src/component/Todos.js"],"sourcesContent":["import React from \"react\";\nimport \"../component/todos.css\";\nimport {\n  Card,\n  CardContent,\n  Grid,\n  ListItemButton,\n  ListItemText,\n  Checkbox,\n} from \"@mui/material\";\n\n// 1. This component formats and returns the list of todos.\n// 2. Treat the question mark like an if statement.\n// If the todos array has items in the list [todos.length], we want to return the list\n// Else, return a message saying \"You have no todo's left\"\n// 3. The map function is called to assign each array item with a key\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\n// a key, and it's own card shown in the UI\nconst Todos = ({ todos }) => {\n  console.log(todos);\n  const todoList = todos.length ? (\n    todos.map((todo) => {\n      return (\n        <Grid key={todo.id}>\n          <Card>\n            {/* Remember, we set the local state of this todo item when the user submits the form in \n              AddTodo.js. All we need to do is return the todo list item */}\n            <CardContent>\n              <ListItemText style={{ padding: \"50px\" }}>{todo}</ListItemText>\n            </CardContent>\n          </Card>\n        </Grid>\n      );\n    })\n  ) : (\n    <p>You have no todo's left</p>\n  );\n  // Lastly, return the todoList constant that we created above to show all of the items on the screen.\n  return (\n    <div className=\"todoCollection\" style={{ padding: \"10px\" }}>\n      {todoList}\n    </div>\n  );\n};\n\nexport default Todos;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;AACA,SACEC,IADF,EAEEC,WAFF,EAGEC,IAHF,EAIEC,cAJF,EAKEC,YALF,EAMEC,QANF,QAOO,eAPP,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,KAAK,GAAG,QAAe;EAAA,IAAd;IAAEC;EAAF,CAAc;EAC3BC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACA,MAAMG,QAAQ,GAAGH,KAAK,CAACI,MAAN,GACfJ,KAAK,CAACK,GAAN,CAAWC,IAAD,IAAU;IAClB,oBACE,QAAC,IAAD;MAAA,uBACE,QAAC,IAAD;QAAA,uBAGE,QAAC,WAAD;UAAA,uBACE,QAAC,YAAD;YAAc,KAAK,EAAE;cAAEC,OAAO,EAAE;YAAX,CAArB;YAAA,UAA2CD;UAA3C;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MAHF;QAAA;QAAA;QAAA;MAAA;IADF,GAAWA,IAAI,CAACE,EAAhB;MAAA;MAAA;MAAA;IAAA,QADF;EAWD,CAZD,CADe,gBAef;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAfF,CAF2B,CAmB3B;;EACA,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAgC,KAAK,EAAE;MAAED,OAAO,EAAE;IAAX,CAAvC;IAAA,UACGJ;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAzBD;;KAAMJ,K;AA2BN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}